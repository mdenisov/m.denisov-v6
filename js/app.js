// Generated by CoffeeScript 1.6.3
define(function(require, exports, module) {
  "use strict";
  var $, Backbone, PubSub, app, _;
  _ = require("underscore");
  $ = require("jquery");
  Backbone = require("backbone");
  PubSub = require("pubsub");
  app = module.exports;
  app.testDomain = 'http://localhost/photosite/';
  app.baseUrl = baseUrl + '/';
  app.ajaxUrl = ajaxurl + '/';
  app.root = "/photosite/";
  app.testRoot = "/photosite/";
  app.domainRegex = "";
  app.view = {};
  app.subView = null;
  app.modules = {};
  app.loader = {};
  app.DEBUG = true;
  app.$window = $(window);
  app.$document = $(document);
  app.$body = $('body');
  app.init = function() {
    app.$document.on('resize', function(e) {
      return PubSub.trigger('app:resize', e);
    });
    app.$document.on('mousemove', function(e) {
      return PubSub.trigger('app:mousemove', e);
    });
    return app.$document.on('keydown', function(e) {
      return PubSub.trigger('app:keydown', e);
    });
  };
  app.isValidUrl = function(href) {
    if (!href) {
      return false;
    } else if (href.indexOf('javascript:') !== -1) {
      return false;
    } else if (href[0] === '#' && href.length === 1) {
      return false;
    } else if (href.indexOf('../') !== -1) {
      console.error('Attempting to load a relative url, bad code monkey! (' + href + ')');
      return false;
    } else if (href[0] !== '/' && href.indexOf('://') === -1) {
      console.error('Attempting to load a relative url, bad code monkey! (' + href + ')');
      return false;
    }
    return true;
  };
  app.getDefinedRoute = function(fragment) {
    var matched;
    if (fragment === '#') {
      return null;
    }
    fragment = fragment.replace(this.domainRegex, '');
    if (!fragment.indexOf(this.baseUrl)) {
      fragment = fragment.substring(this.baseUrl.length);
    } else if (!fragment.indexOf(this.testDomain)) {
      fragment = fragment.substring(this.testDomain.length);
    } else if (fragment.indexOf('://') !== -1) {
      return null;
    }
    fragment = Backbone.history.getFragment(fragment);
    matched = _.any(Backbone.history.handlers, function(handler) {
      return handler.route.test(fragment);
    });
    if (matched) {
      return fragment;
    } else {
      return null;
    }
  };
  app.delay = function(time, callback) {
    return setTimeout((function() {
      return callback();
    }), time);
  };
  return app;
});
